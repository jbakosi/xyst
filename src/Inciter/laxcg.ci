// *****************************************************************************
/*!
  \file      src/Inciter/laxcg.ci
  \copyright 2012-2015 J. Bakosi,
             2016-2018 Los Alamos National Security, LLC.,
             2019-2021 Triad National Security, LLC.,
             2022-2024 J. Bakosi
             All rights reserved. See the LICENSE file for details.
  \brief     Charm++ module interface for LaxCG
*/
// *****************************************************************************

module laxcg {

  extern module transporter;
  extern module discretization;

  include "UnsMesh.hpp";
  include "PUPUtil.hpp";

  namespace inciter {

    array [1D] LaxCG {
      entry LaxCG( const CProxy_Discretization& disc,
                   const std::map< int, std::vector< std::size_t > >& bface,
                   const std::map< int, std::vector< std::size_t > >& bnode,
                   const std::vector< std::size_t >& triinpoel );
      initnode void registerReducers();
      entry void setup( tk::real v );
      entry void start();
      entry void evalres( const std::vector< tk::real >& l2ref );
      entry [reductiontarget] void advance( tk::real newdt );
      entry void comnorm( const std::unordered_map< int,
        std::unordered_map< std::size_t, std::array< tk::real, 4 > > >& inbnd );
      entry void comgrad( const std::unordered_map< std::size_t,
                                  std::vector< tk::real > >& ingrad );
      entry void comrhs( const std::unordered_map< std::size_t,
                                 std::vector< tk::real > >& inrhs );
      entry void feop();
      entry void step();
      entry void integrals();
      entry void stage();
      entry void evalLB( int nrestart );

      // SDAG code follows. See http://charm.cs.illinois.edu/manuals/html/
      // charm++/manual.html, Sec. "Structured Control Flow: Structured Dagger".

      entry void wait4int() {
        when ownnorm_complete(), comnorm_complete() serial { merge(); } }

      entry void wait4grad() {
        when owngrad_complete(), comgrad_complete() serial { rhs(); } }

      entry void wait4rhs() {
        when ownrhs_complete(), comrhs_complete() serial { solve(); } }

      entry void wait4stage() {
        when feop_complete(), resize_complete() serial { stage(); } }

      entry void ownnorm_complete();
      entry void comnorm_complete();
      entry void owngrad_complete();
      entry void comgrad_complete();
      entry void ownrhs_complete();
      entry void comrhs_complete();
      entry void feop_complete();
      entry void resize_complete();
    }

  } // inciter::

}
