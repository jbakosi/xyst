/*!
  \page      kozcg_example_rayleigh_taylor KozCG: Rayleigh-Taylor unstable configuration

This example uses @ref inciter_kozcg in @ref inciter_main to compute a problem
whose analytic solution is known, therefore it can be used to verify the
accuracy of the numerical method and the correctness of the software
implementation.

The purpose of this test case is to assess time dependent fluid motion in the
presence of Rayleigh-Taylor unstable conditions, i.e., opposing density and
pressure gradients. The derivation of this test problem is given in [1].

@section kozcg_example_rayleigh_taylor_equations Equations solved

The system of equation solved is

\f[ \begin{split}
  \frac{\partial U}{\partial t} + \frac{\partial F_j}{\partial x_j} = S,\qquad
  U = \begin{Bmatrix} \rho \\ \rho u_i \\ \rho E \end{Bmatrix}, \enskip F_j =
  \begin{Bmatrix} \rho u_j \\ \rho u_iu_j + p\delta_{ij} \\ u_j(\rho E + p)
  \end{Bmatrix}, \enskip
  S = \begin{Bmatrix} S_\rho \\ S_{u,i} \\ S_E \end{Bmatrix}
\end{split} \f]

detailed at the @ref inciter_kozcg page describing its numerical method, with
the exact solution

\f[ \begin{split}
\rho(x_i) & = \rho_0 - \left( \beta_1 x_1^2 + \beta_2 x_2^2 + \beta_3 x_3^2 \right) \\
u_i(x_i,t) & = f(t) g(x_i) = \cos(k \pi t) \left( \begin{array}{ccc}
        x_3 \sin (\pi x_1)  \\
        x_3 \cos (\pi x_2) \\
        -\frac{1}{2} \pi x_3^2 \left[ \cos (\pi x_1) - \sin(\pi x_2) \right]
   \end{array} \right) \\
p(x_i) & = p_0 + \alpha \left( \beta_1 x_1^2 + \beta_2 x_2^2 + \beta_3 x_3^2 \right) \\
E(x_i,t) & = \frac{p(x_i)} {\rho \left( \gamma -1 \right) }+ \frac{1}{2} f^2(t) g_j g_j
\end{split} \f]
and the source terms
\f[ \begin{split}
S_\rho & = u_i \frac{\partial \rho}{\partial x_i} \\
S_{u,i} & = \rho g_i \frac{\partial f}{\partial t} + f g_i S_{\rho} +
  \rho f^2 g_j \frac{\partial g_i}{\partial x_j} + \frac{\partial p}{\partial
  x_i} \\
S_E & = \rho g_i g_i f \frac{\partial f}{\partial t} + \left[ \frac{p}{\rho
  \left( \gamma -1 \right) } + \frac{1}{2} f^2 g_i g_i \right] S_{\rho} \\
  & \quad + \rho f g_i \left[  \frac{1}{\rho \left( \gamma -1 \right)}
  \frac{\partial p}{\partial x_i} - \frac{p}{\rho^2 \left(\gamma -1 \right)}
  \frac{\partial \rho}{\partial x_i} + f^2 g_j \frac{\partial g_j}{\partial
  x_i} \right] + f g_i \frac{\partial p}{\partial x_i}.
\end{split} \f]

For more details, see @ref papers.

@section kozcg_example_rayleigh_taylor_setup Problem setup

The simulation domain is a cube centered around the point {0,0,0}. The initial
conditions are sampled from the analytic solution at t=0. We set Dirichlet
boundary conditions on the sides of the cube, sampling the analytic solution.
The numerical solution is time-dependent. The simulation was run for a single
time unit computing the numerical errors during time stepping and the errors at
t=1 are used to assess the convergence rate. A time step of 0.001 was used for
the coarsest mesh and was successively halved for the finer meshes.

To estimate the order of convergence, the numerical solution is computed using
three different meshes, whose properties of are tabulated below, where h is the
average edge length.
       Mesh     | Points    | Tetrahedra   | h
       :------: | --------: | -----------: | --------:
           750K |  132,651  |    750,000   | 0.02
             6M | 1,030,301 |  6,000,000   | 0.01
            48M | 8,120,601 | 48,000,000   | 0.005

@note For the meshes, contact us using the link at the bottom of the page.

@section kozcg_example_rayleigh_taylor_sha Code revision to reproduce

To reproduce the results below, use code revision [8c9d1db](https://codeberg.org/xyst/xyst/commit/8c9d1db4d3f843170b585799a539b7851a67d467) and the control file below.

@section kozcg_example_rayleigh_taylor_control Control file

@code{.lua}
-- vim: filetype=lua:

print "Euler equations computing non-stationary Rayleigh-Taylor"

term = 3.0
ttyi = 10

solver = "kozcg"
fct = false

dt = 0.001      -- 750K
--dt = 0.0005     --   6M
--dt = 0.00025      --  48M

part = "rcb"

problem = {
  name = "rayleigh_taylor",
  alpha = 1.0,
  beta = { 1.0, 1.0, 1.0 },
  p0 = 1.0,
  r0 = 1.0,
  kappa = 1.0,
}

mat = { spec_heat_ratio = 5/3 }

bc_dir = {
  { 1, 1, 1, 1, 1, 1 },
  { 2, 1, 1, 1, 1, 1 },
  { 3, 1, 1, 1, 1, 1 },
  { 4, 1, 1, 1, 1, 1 },
  { 5, 1, 1, 1, 1, 1 },
  { 6, 1, 1, 1, 1, 1 }
}

fieldout = {
  iter = 1000
}

diag = {
  iter = 1,
  format = "scientific"
}
@endcode

@section kozcg_example_rayleigh_taylor_run Run using the 750K mesh on 32 CPUs

@code{.bash}
./charmrun +p32 Main/inciter -i unitcube_750K.exo -c rayleigh_taylor.q
@endcode

@section kozcg_example_rayleigh_taylor_fieldvis Visualization

[ParaView](https://www.paraview.org) can be used for interactive visualization
of the numerically computed fields as

@code{.bash}
paraview out.e-s.0.32.0
@endcode

The figures below depict the velocity field at the surface at different
simulation times, showing the reversal of the velocity components in time,
indicating the spatial and temporal dynamics of the velocity field.

@m_div{m-col-m-10 m-center-m}
<img src="images/rt_xvelocity_t=0.png"/>
<img src="images/rt_xvelocity_t=05.png"/>
<img src="images/rt_xvelocity_t=1.png"/>
<img src="images/rt_yvelocity_t=0.png"/>
<img src="images/rt_yvelocity_t=05.png"/>
<img src="images/rt_yvelocity_t=1.png"/>
<img src="images/rt_zvelocity_t=0.png"/>
<img src="images/rt_zvelocity_t=05.png"/>
<img src="images/rt_zvelocity_t=1.png"/>
@m_enddiv

The figures below show the density, pressure, energy, and velocity on the
surface at the final simulation time.

@m_div{m-col-m-10 m-center-m}
<img src="images/rt_density.png"/>
<img src="images/rt_pressure.png"/>
<img src="images/rt_energy.png"/>
<img src="images/rt_velocity.png"/>
@m_enddiv

@section kozcg_example_rayleigh_taylor_error Numerical errors and convergence rate

The table below shows the numerical L1 errors of the flow quantities computed.
The L1 error is computed as
\f[
\left| \left| \varepsilon \right| \right|_1 = \frac{\sum_{v=1}^n V^v \left|
\hat{U}^v - U^{v} \right|} {\sum_{v=1}^n V^v}
\f]
where n is the total number of points of the mesh,
\f$\color[HTML]{dcdcdc}\hat{U}^v\f$ and \f$\color[HTML]{dcdcdc}U^v\f$ are the
exact and computed solutions at mesh point v, and \f$\color[HTML]{dcdcdc}V^v\f$
denotes the volume associated to mesh point v. The order of convergence is
estimated as
\f[
p = \frac{ \log \left| \left| \varepsilon \right| \right|_1^{m+1} - \log \left|
\left| \varepsilon \right| \right|_1^m}{ \log h^{m+1} - \log h^m}
\f]
where m is a mesh index. The following table summarizes the L1 errors in all
flow variables at t=1.
       Mesh     | L1(r)     |  L1(u)     | L1(v)     | L1(w)     | L1(e)
       :------: | --------: | ---------: | --------: | --------: | --------:
       750K     | 1.09e-3   |  6.65e-4   | 9.17e-4   | 7.21e-4   | 5.22e-3
       6M       | 3.08e-4   |  1.85e-4   | 2.50e-4   | 1.98e-4   | 1.54e-3
       48M      | 8.03e-5   |  4.93e-5   | 6.38e-5   | 5.13e-5   | 4.13e-4
       p        | 1.94      |  1.91      | 1.97      | 1.95      | 1.90
Here r, u, v, w, and e are the fluid density, velocity in the x, y, z
directions, and the internal energy, respectively. The order of convergence
approaches the expected value of 2.0.

@section kozcg_example_rayleigh_taylor_refs References

@m_div{m-text m-noindent}
[1] J. Waltz and T.R. Canfield and N.R. Morgan and L.D. Risinger and J.G. Wohlbier, [Manufactured solutions for the three-dimensional Euler equations with relevance to Inertial Confinement Fusion](https://doi.org/10.1016/j.jcp.2014.02.040), Journal of Computational Physics, 267, 196--209, 2014.
@m_enddiv

*/
