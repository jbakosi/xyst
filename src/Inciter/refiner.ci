// *****************************************************************************
/*!
  \file      src/Inciter/refiner.ci
  \copyright 2012-2015 J. Bakosi,
             2016-2018 Los Alamos National Security, LLC.,
             2019-2021 Triad National Security, LLC.
             All rights reserved. See the LICENSE file for details.
  \brief     Charm++ module interface file for mesh refiner
  \details   Charm++ module interface file for mesh refiner.
  \see       Refiner.h and Refiner.C for more info.
*/
// *****************************************************************************

module refiner {

  include "Scheme.hpp";
  include "AMR/AMR_types.hpp";

  extern module sorter;
  extern module meshwriter;

  namespace inciter {

    array [1D] Refiner {
      entry Refiner( std::size_t meshid,
                     const CProxy_Transporter& transporter,
                     const CProxy_Sorter& sorter,
                     const tk::CProxy_MeshWriter& meshwriter,
                     const std::vector< Scheme >& scheme,
                     const tk::RefinerCallback& cbr,
                     const tk::SorterCallback& cbs,
                     const std::vector< std::size_t >& ginpoel,
                     const tk::UnsMesh::CoordMap& coordmap,
                     const std::map< int, std::vector< std::size_t > >& bface,
                     const std::vector< std::size_t >& triinpoel,
                     const std::map< int, std::vector< std::size_t > >& bnode,
                     int nchare );
      entry void start();
      entry void reorder();
      entry void correctref();
      entry void next();
      entry void query( int fromch, const tk::UnsMesh::EdgeSet& edges );
      entry void recvquery();
      entry void response();
      entry void bnd( int fromch, const std::vector< int >& chares );
      entry void recvbnd();
      entry void addRefBndEdges(
        int fromch,
        const AMR::EdgeData& en,
        const std::unordered_set< std::size_t > intermediates );
      entry void refine();
      entry void comExtra();
      entry void perform();
      entry void sendProxy();
    };

  } // inciter::

}
