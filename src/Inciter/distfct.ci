// *****************************************************************************
/*!
  \file      src/Inciter/distfct.ci
  \copyright 2012-2015 J. Bakosi,
             2016-2018 Los Alamos National Security, LLC.,
             2019-2021 Triad National Security, LLC.
             All rights reserved. See the LICENSE file for details.
  \brief     Charm++ module interface for distributed flux-corrected transport
  \details   Charm++ module interface file for asynchronous distributed
    flux-corrected transport (FCT).
  \see       DistFCT.[Ch] and FluxCorrector.[Ch] for more info.
*/
// *****************************************************************************

module distfct {

  include "unordered_map";
  include "CommMap.hpp";

  namespace inciter {

    array [1D] DistFCT {
      entry DistFCT(
        int nchare,
        std::size_t nu,
        std::size_t np,
        const tk::NodeCommMap& nodeCommMap,
        const std::unordered_map< std::size_t, std::size_t >& bid,
        const std::unordered_map< std::size_t, std::size_t >& lid,
        const std::vector< std::size_t >& inpoel );
      entry void comaec( const std::vector< std::size_t >& gid,
                         const std::vector< std::vector< tk::real > >& P );
      entry void comalw( const std::vector< std::size_t >& gid,
                         const std::vector< std::vector< tk::real > >& Q );
      entry void comlim( const std::vector< std::size_t >& gid,
                         const std::vector< std::vector< tk::real > >& U );

      // SDAG code follows. See http://charm.cs.illinois.edu/manuals/html/
      // charm++/manual.html, Sec. "Structured Control Flow: Structured Dagger".

      entry void wait4fct() {
        when ownaec_complete(
               const std::unordered_map< std::size_t,
                       std::vector< std::pair< bool, tk::real > > >& bcdir ),
             comaec_complete(),
             ownalw_complete(),
             comalw_complete() serial "fct" { lim( bcdir ); } };

      entry void wait4app() {
        when ownlim_complete(), comlim_complete() serial "app" { apply(); } };

      entry void ownaec_complete(
               const std::unordered_map< std::size_t,
                       std::vector< std::pair< bool, tk::real > > >& bcdir );
      entry void ownalw_complete();
      entry void ownlim_complete();
      entry void comaec_complete();
      entry void comalw_complete();
      entry void comlim_complete();
    };

  } // inciter::

}
