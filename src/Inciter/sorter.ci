// *****************************************************************************
/*!
  \file      src/Inciter/sorter.ci
  \copyright 2012-2015 J. Bakosi,
             2016-2018 Los Alamos National Security, LLC.,
             2019-2021 Triad National Security, LLC.
             All rights reserved. See the LICENSE file for details.
  \brief     Charm++ module interface file for mesh sorter
  \details   Charm++ module interface file for mesh sorter.
  \see       Sorter.h and Sorter.C for more info.
*/
// *****************************************************************************

module sorter {

  include "Callback.hpp";
  include "CommMap.hpp";

  extern module meshwriter;

  namespace inciter {

    array [1D] Sorter {
      entry Sorter( std::size_t meshid,
                    const CProxy_Transporter& transporter,
                    const tk::CProxy_MeshWriter& meshwriter,
                    const tk::SorterCallback& cbs,
                    const std::vector< Scheme >& scheme,
                    CkCallback reorderRefiner,
                    const std::vector< std::size_t >& ginpoel,
                    const tk::UnsMesh::CoordMap& coordmap,
                    const tk::UnsMesh::Chunk& el,
                    const std::map< int, std::vector< std::size_t > >& bface,
                    const std::vector< std::size_t >& triinpoel,
                    const std::map< int, std::vector< std::size_t > >& bnode,
                    int nchare );
      entry void setup( std::size_t npoin );
      entry void query( int fromch, const tk::AllCommMaps& bnd );
      entry void recvquery();
      entry void response();
      entry void bnd( int fromch, tk::CommMaps& msum );
      entry void recvbnd();
      entry void start();
      entry void offset( int c, std::size_t u );
      entry void request( int c, const std::unordered_set< std::size_t >& nd );
      entry void neworder( const std::unordered_map< std::size_t,
                       std::tuple< std::size_t, tk::UnsMesh::Coord > >& nodes );
      entry void createWorkers();

      // SDAG code follows. See http://charm.cs.illinois.edu/manuals/html/
      // charm++/manual.html, Sec. "Structured Control Flow: Structured Dagger".

      entry void wait4prep() {
        when reorderowned_complete(), nodes_requested_complete()
        serial "prepare" { prepare(); }
      };

      entry void reorderowned_complete();
      entry void nodes_requested_complete();
    };

  } // inciter::

}
