/*!
  \page      kozcg_example_taylor_green KozCG: Taylor-Green vortex

This example uses @ref inciter_kozcg in @ref inciter_main to compute a problem
whose analytic solution is known, therefore it can be used to verify the
accuracy of the numerical method and the correctness of the software
implementation.

We compute 3D simulations of the 2D Taylor-Green vortex, see e.g., [1]. This is
a time-invariant solution of the problem. A similar configuration was also
computed in [2,3] on a different, practically 2D, domain.

@section kozcg_example_taylor_green_equations Equations solved

The system of equation solved is

\f[ \begin{split}
  \frac{\partial U}{\partial t} + \frac{\partial F_j}{\partial x_j} = S,\qquad
  U = \begin{Bmatrix} \rho \\ \rho u_i \\ \rho E \end{Bmatrix}, \enskip F_j =
  \begin{Bmatrix} \rho u_j \\ \rho u_iu_j + p\delta_{ij} \\ u_j(\rho E + p)
  \end{Bmatrix}, \enskip
  S = \begin{Bmatrix} S_\rho \\ S_{u,i} \\ S_E \end{Bmatrix}
\end{split} \f]

detailed at the @ref inciter_kozcg page describing its numerical method, with
the exact solution

\f[ \begin{split}
\rho(x_i) & = 1 \\
u_i(x_i) & = \left( \begin{array}{ccc}
        \sin(\pi x_1) \cos(\pi x_2) \\
        -\cos(\pi x_1) \sin(\pi x_2) \\
        0
   \end{array} \right) \\
p(x_i) & = 10 + \frac{\rho}{4} \left[ \cos(2 \pi x_1) + \cos(2\pi x_2) \right] \\
e(x_i) & = \frac{p(x_i)}{\rho \left( \gamma - 1\right)}
\end{split} \f]
and the source terms
\f[ \begin{split}
S_\rho & = 0 \\
S_{u,i} & = 0 \\
S_E & = \frac{3 \pi}{8} \left[ \cos(3 \pi x_1) \cos( \pi x_2) - \cos( 3 \pi x_2
\cos x_1) \right]
\end{split} \f]

For more details, see @ref papers.

@section kozcg_example_taylor_green_setup Problem setup

The simulation domain is a cube centered around the point {0,0,0}. The initial
conditions are sampled from the analytic solution at t=0. We set Dirichlet
boundary conditions on the sides of the cube, sampling the analytic solution.
The numerical solution does not depend on time and approaches steady state due
to the source term which ensures equilibrium in time. As the numerical solution
approaches a stationary state, the numerical errors in the flow variables
converge to stationary values, determined by the combination of spatial and
temporal errors which are measured and assessed. The simulation was run for a
single time unit computing the numerical errors. A time step of 0.002 was used
for the coarsest mesh and was successively halved for the finer meshes.

To estimate the order of convergence, the numerical solution is computed using
three different meshes, whose properties of are tabulated below.
       Mesh     | Points    | Tetrahedra   | h
       :------: | --------: | -----------: | --------:
           750K |  132,651  |    750,000   | 0.02
             6M | 1,030,301 |  6,000,000   | 0.01
            48M | 8,120,601 | 48,000,000   | 0.005
Here h is the average edge length.

@note For the meshes, contact us using the link at the bottom of the page.

@section kozcg_example_taylor_green_sha Code revision to reproduce

To reproduce the results below, use code revision [8c9d1db](https://codeberg.org/xyst/xyst/commit/8c9d1db4d3f843170b585799a539b7851a67d467) and the control file below.

@section kozcg_example_taylor_green_control Control file

@code{.lua}
-- vim: filetype=lua:

print "Euler equations computing stationary Taylor-Green"

term = 2.0
ttyi = 10

solver = "kozcg"
fct = false

dt = 0.002      -- 750K
--dt = 0.001      --   6M
--dt = 0.0005      --  48M

part = "rcb"

problem = {
  name = "taylor_green"
}

mat = { spec_heat_ratio = 5/3 }

bc_dir = {
  { 1, 1, 1, 1, 1, 1 },
  { 2, 1, 1, 1, 1, 1 },
  { 3, 1, 1, 1, 1, 1 },
  { 4, 1, 1, 1, 1, 1 },
  { 5, 1, 1, 1, 1, 1 },
  { 6, 1, 1, 1, 1, 1 }
}

fieldout = {
  iter = 1000
}

diag = {
  iter = 1,
  format = "scientific"
}
@endcode

@section kozcg_example_taylor_green_run Run using the 750K mesh on 32 CPUs

@code{.bash}
./charmrun +p32 Main/inciter -i unitcube_750K.exo -c taylor_green.q
@endcode

@section kozcg_example_taylor_green_fieldvis Visualization

[ParaView](https://www.paraview.org) can be used for interactive visualization
of the numerically computed fields as

@code{.bash}
paraview out.e-s.0.32.0
@endcode

The figures below show the velocity magnitudes across a center plane
at different simulation times, demonstrating time-invariance of the numerical
solution.

@m_div{m-col-m-10 m-center-m}
<img src="images/tg_velocity_t=0.png"/>
<img src="images/tg_velocity_t=03.png"/>
<img src="images/tg_velocity_t=06.png"/>
<img src="images/tg_velocity_t=10.png"/>
@m_enddiv

@section kozcg_example_taylor_green_error Numerical errors and convergence rate

The table below shows the numerical L1 errors of the flow quantities computed.
The L1 error is computed as
\f[
\left| \left| \varepsilon \right| \right|_1 = \frac{\sum_{v=1}^n V^v \left|
\hat{U}^v - U^{v} \right|} {\sum_{v=1}^n V^v}
\f]
where n is the number of points, \f$\hat{U}^v\f$ and
\f$U^v\f$ are the exact and computed solutions at mesh
point v, and \f$V^v\f$ denotes the volume associated to
mesh point v. The order of convergence is estimated as
\f[
p = \frac{ \log \left| \left| \varepsilon \right| \right|_1^{m+1} - \log \left|
\left| \varepsilon \right| \right|_1^m}{ \log h^{m+1} - \log h^m}
\f]
where m is a mesh index. The following table summarizes the L1 errors in all
flow variables at the stationary state.
       Mesh     | L1(r)     |  L1(u)     | L1(v)     | L1(w)     | L1(e)
       :------: | --------: | ---------: | --------: | --------: | --------:
       750K     | 1.28e-5   |  5.19e-5   | 3.31e-4   | 2.39e-5   | 1.92e-4
       6M       | 2.41e-6   |  7.28e-6   | 5.00e-5   | 3.40e-6   | 4.04e-5
       48M      | 5.41e-7   |  1.38e-6   | 8.33e-6   | 7.10e-7   | 1.02e-5
       p        | 2.16      |  2.40      | 2.59      | 2.26      | 1.99
Here r, u, v, w, and e are the fluid density, velocity in the x, y, z
directions, and the internal energy, respectively. As expected, the asymptotic
convergence of the computed numerical solution in all variables approaches 2.

@section kozcg_example_taylor_green_refs References

@m_div{m-text m-noindent}
[1] J.R. Kamm, [Enhanced verification test suite for phyics simulation codes](https://library.lanl.gov/cgi-bin/getfile?LA-14379.pdf), LA-14379, SAND2008-7813, 2008.
@m_enddiv

@m_div{m-text m-noindent}
[2] J. Waltz, [Microfluidics simulation using adaptive unstructured grids](https://doi.org/10.1002/fld.753), International Journal for Numerical Methods in Fluids, 46, 9, 939-960, 2004.
@m_enddiv

@m_div{m-text m-noindent}
[3] J. Waltz, T.R. Canfield, N.R. Morgan, L.D. Risinger, J.G. Wohlbier, [Verification of a three-dimensional unstructured finite element method using analytic and manufactured solutions](https://doi.org/10.1016/j.compfluid.2013.03.025), Computers & Fluids, 81: 57-67, 2013.
@m_enddiv

*/
