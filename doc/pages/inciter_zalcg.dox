namespace inciter {
/*!
  \page      inciter_zalcg ZalCG

@tableofcontents{xml}

This page describes the numerical method in `ZalCG` method at a high level, for
more details, see @ref papers.

@note In ZalCG, _Zal_ stands for [Steven Zalesak](https://www.researchgate.net/profile/Steven-Zalesak), and _CG_ for continuous Galerkin.

The numerical method in ZalCG is an edge-based implementation of a finite
element method for unstructured meshes, composed of tetrahedral cells. The
solver is intended for the computing of high-speed compressible flows. A good
reference for the finite element method itself is [1] and on flux-corrected
transport is [2]. The implementation of the method uses an
asynchronous-by-default, distributed-memory, task-parallel programming paradigm
using the Charm++ runtime system.

@section zalcg_euler The equations of compressible flow

The governing equations solved are the 3D unsteady Euler equations, governing
inviscid compressible flow, written here in the flux-conservative form
\f[ \begin{split}
\frac{\partial U}{\partial t} + \frac{\partial F_j}{\partial x_j} = S,\qquad
U = \begin{Bmatrix} \rho \\ \rho u_i \\ \rho E \end{Bmatrix}, \enskip F_j =
\begin{Bmatrix} \rho u_j \\ \rho u_iu_j + p\delta_{ij} \\ u_j(\rho E + p)
\end{Bmatrix}
\end{split} \f]
where the summation convention on repeated indices has been applied, and
\f$\rho\f$ is the density, \f$u_i\f$
the velocity vector, \f$E=u_iu_i/2+e\f$ is the specific
total energy, \f$e\f$ is the specific internal energy, and
\f$p\f$ is the pressure. The system is closed with the
ideal gas law equation of state
\f[ \begin{split}
p = \rho e (\gamma - 1),
\end{split} \f]
where \f$\gamma\f$ is the ratio of specific heats. The
exact form of the equation of state is of secondary importance, any arbitrary
(i.e. analytic or tabulated) equation of state can be used to relate density
and internal energy to pressure.

@section zalcg_method The numerical method

The above system is solved using an edge-based finite-element method for linear
tetrahedra. Using this particular approach, the unknown solution quantities are
the conserved variables \f$U\f$ and are located at the
nodes of the mesh. The solution at any point within the computational domain is
represented as
\f[ \begin{split}
  U(\vec{x}) = \sum_{v \in \Omega_h} N^v(\vec{x}) U^v
\end{split} \f]
where \f$\Omega_h\f$ is the tetrahedron containing the
point \f$\vec{x}\f$, \f$U^v\f$ is the
solution at vertex \f$v\f$, and
\f$N^v(\vec{x})\f$ is a linear basis function associated
with vertex \f$v\f$ and element
\f$\Omega_h\f$. Applying a Galerkin, lumped-mass
approximation to the Euler equations gives the following semi-discrete form of
the governing equations for a vertex
\f$v\f$:
\f[ \begin{split}
  V^v\frac{\text{d}U^v}{\text{d}t} = - \sum_{ vw\in v} D^{vw}_j F^{vw}_j -
  \sum_{vw\in v} B^{vw}_j \left( F^v_j + F^w_j\right) - B^v_j F^v_j
\end{split} \f]
where \f$vw\f$ represent all edges connected to
\f$v\f$, \f$V\f$ is the volume
surrounding \f$v\f$, \f$F^{vw}_j\f$
is the numerical flux between \f$v\f$ and
\f$w\f$.  The first term on the right-hand-side above is
evaluated for all vertices within the domain. The last two terms are only
evaluated for vertices \f$v\f$ and surrounding edges
\f$vw\f$ that lie on the domain boundary.
\f$F^v_j\f$ denotes the boundary flux. The term
\f$D^{vw}_j\f$ is effectively the area-weighted normal to
the dual face separating \f$v\f$ and
\f$w\f$. It is calculated as
\f[ \begin{split}
  D^{vw}_j = \frac{1}{2} \sum_{\Omega_h \in vw} \int_{\Omega_h} \left( N^v
  \frac{\partial N^w}{\partial x_j} - N^w \frac{\partial N^v}{\partial x_j}
  \right) \, \text{d} \Omega
\end{split} \f]
where \f$\Omega_h \in vw\f$ represents all elements
attached to edge \f$vw\f$. This numerical
scheme is guaranteed to be conservative since
\f$D^{vw}_j\f$ is antisymmetric. The boundary terms
\f$B^{vw}_j\f$ and \f$B^v_j\f$ are
defined as
\f[ \begin{split}
  B^{vw}_j &= \frac{1}{2} \sum_{\Gamma_h \in vw} \int_{\Gamma_h} N^v N^w n_j
  \, \text{d} \Gamma \\
  B^v_j &= \sum_{\Gamma_h \in v} \int_{\Gamma_h} N^v N^v n_j  \, \text{d}
  \Gamma
\end{split} \f]

For the derivation of the above and other details, see [1] and [3].

@section zalcg_flux Numerical flux

The numerical flux \f$F^{vw}_j\f$ between mesh points
\f$v\f$ and \f$w\f$ is computed as
\f[ \begin{split}
  F^{vw}_j & = 2 F_j( U_{vw}^{n+1/2} ) \\
  U_{vw}^{n+1/2} & = \frac{1}{2}\left( U^v + U^w \right) -
  \frac{\Delta t}{2} \left.\frac{\partial F_j}{\partial x_j}\right|^{vw} \\
  \left.\frac{\partial F_j}{\partial x_j}\right|^{vw} & =
    \frac{l^{vw}_j}{l_kl_k}( F^v_j - F^w_j )
\end{split} \f]
where \f${l_j}\f$ denotes the edge difference vector
\f[
l^{vw}_j=x^v_j - x^w_j
\f]
The above flux prescribes a Lax-Wendroff (or Taylor-Galerkin) scheme for the
edge-based formulation. Monotonicity is ensured by flux-corrected transport
(FCT).

@section zalcg_fct Flux-corrected transport

Flux-corrected transport (FCT) is a way to circumvent the consequence of
Godunov's theorem, which states that no linear scheme of order greater than 1
will yield monotonic solutions.  Accordingly, FCT is a nonlinear scheme that
combines a high-, and a low-order scheme using limiting.

The high-order scheme in the FCT algorithm in ZalCG is given by the
Taylor-Galerkin flux above with the Euler equations discretized in time with
the forward Euler method as
\f[
V \Delta U^h = \Delta t r(U^n)
\f]
where \f$U^n\f$ is the solution at the previous time step \f$n\f$ and the notation of
the numerical solution represented at mesh node \f$v\f$ is dropped for brevity. The
low-order scheme is constructed from the high-order scheme in by adding mass diffusion
\f[
V \Delta U^l = \Delta t r(U^n) - k(U^n)
\f]
with the diffusion operator
\f[ \begin{split}
k(U) & = \sum_{vw \in v} K^{vw} (U^v-U^w) \\
K^{vw} & = c_\tau \sum_{\Omega_h \in vw} \int_{\Omega_h}N^vN^v -
N^vN^w\mathrm{d}\Omega
\end{split} \f]
where \f$c_\tau\f$ denotes a diffusion coefficient. The
steps to arrive at the diffusion term for edges are analogous to those of the
Laplacian operator, invoking the symmetry property of the diffusion operator
for linear tetrahedra as
\f[
K^{ik}\!=\!-\sum_{j\ne i}K^{jk}
\f]
In the FCT procedure \f$c_\tau\!=\!1\f$ guarantees
monotonic solutions. The above specifications lead to the following
antidiffusive edge contributions (AEC)
\f[
\mathrm{AEC}^{vw} = \Delta U^h - \Delta U^l = k(U^n)
\f]
which is then used to update the low order solution after performing the
limiting procedure to arrive at the solution at the new time step
\f$n+1\f$
\f[
\Delta U^{n+1} = U^l + \sum_{vw \in v} \lim[\mathrm{AEC}^{vw}]
\f]
Computing the limit coefficients follows the same procedure, detailed in [2],
implemented over the edges, given below.

@section zalcg_limiting The limiting procedure

The procedure first aggregates to points i the signed contributions of AECs:
\f[ \begin{split}
P_i^{\pm} = \sum_e \begin{Bmatrix} \max \\ \min \end{Bmatrix} (0,\mathrm{AEC}_e)
\end{split} \f]

The limiting procedure requires the maximum and minimum nodal values of the
low-order solution and the previous solution,
\f[ \begin{split}
{\mbox{\boldmath$U$}}_i^* = \begin{Bmatrix} \max \\ \min \end{Bmatrix}
({\mbox{\boldmath$U$}}^l_i,{\mbox{\boldmath$U$}}^n).
\end{split} \f]
Another alternative is to only consider the low order solution, when computing
the allowed solution bounds, which leads to the so-called 'clipping limiter' in
place of the equation above. This is followed by computing the maximum and
minimum nodal values of all edges connected to a node
\f[ \begin{split}
{\mbox{\boldmath$U$}}_e^* = \begin{Bmatrix} \max \\ \min \end{Bmatrix}
({\mbox{\boldmath$U$}}^*_A,{\mbox{\boldmath$U$}}^*_B),
\end{split} \f]
then computing the maximum and minimum unknowns of the edges surrounding each
node,
\f[ \begin{split}
{\mbox{\boldmath$U$}}_i^{\tiny\begin{matrix} \max \\ \min \end{matrix}} =
\begin{Bmatrix} \max \\ \min \end{Bmatrix}
({\mbox{\boldmath$U$}}^*_1,{\mbox{\boldmath$U$}}^*_2,\dots,{\mbox{\boldmath$U$}}^*_m).
\end{split} \f]
The limit coefficients will be computed (see below) based on
\f$P_i^{\pm}\f$ and the maximum and minimum increments and
decrements the nodal solution values are allowed to achieve,
\f[ \begin{split}
Q_i^{\pm} = {\mbox{\boldmath$U$}}_i^{\tiny\begin{matrix} \max \\ \min
\end{matrix}} - {\mbox{\boldmath$U$}}^l.
\end{split} \f]

Defining the ratios of positive and negative edge contributions for each
node \f$i\f$ that ensure monotonicity as
\f[ \begin{split}
R_i^{\pm} = \left\{\begin{matrix} \min(1,Q_i^{\pm}/P_i^{\pm}) & P_i^+ > 0 >
P_i^- \\ 1 & \mathrm{otherwise} \end{matrix} \right.,
\end{split} \f]
the limit coefficient for each edge  is taken as the most conservative ratio
\f[ \begin{split}
C_e = \min_{i \in \Omega_e}
\left\{\begin{matrix} R_i^+ & \mathrm{AEC}>0 \\ R_i^- & \mathrm{AEC}<0
\end{matrix}\right..
\end{split} \f]
The limited AEC is then scatter-added to nodes of the low-order solution:
\f[ \begin{split}
U_i^{n+1} = U_i^l + \sum_{i \in \Omega_e} C_e \cdot \mathrm{AEC}.
\end{split} \f]

The above procedure is general, works on the numerical solution (instead on
fluxes or slopes), and does not require a Riemann solver. The same procedure
can be used for each scalar in a system of equations. This works well for
independent scalars, but for coupled system of equations additional techniques
have been developed to reflect the coupled nature of the equations in the
limiting procedure.

@section zalcg_refs References

1. R. LÃ¶hner, [Applied Computational Fluid Dynamics Techniques: An Introduction Based on Finite Element Methods](https://onlinelibrary.wiley.com/doi/book/10.1002/9780470989746), Wiley, 2008.

2. Lohner, Morgan, Peraire, Vahdati, [Finite element flux-corrected transport (FEM-FCT) for the Euler and Navier--Stokes equations](http://dx.doi.org/10.1002/fld.1650071007), International Journal for Numerical Methods in Fluids, 7, 1093-1109, 1987.

3. J. Waltz, N.R. Morgan, T.R. Canfield, M.R.J. Charest, L.D. Risinger, J.G. Wohlbier, [A three-dimensional finite element arbitrary LagrangianâEulerian method for shock hydrodynamics on unstructured grids](https://doi.org/10.1016/j.compfluid.2013.12.021), Computers & Fluids, 92: 172-187, 2014.

*/
} // inciter::
