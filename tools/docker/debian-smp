################################################################################
# vim: filetype=dockerfile:
#
# \file      tools/docker/debian-smp
# \copyright 2012-2015 J. Bakosi,
#            2016-2018 Los Alamos National Security, LLC.,
#            2019-2021 Triad National Security, LLC.
#            2022-2023 J. Bakosi
#            2022-2023 J. Bakosi
#            All rights reserved. See the LICENSE file for details.
# \brief     Install xyst external libraries ready for CI
# \details
#   Install xyst external external libraries ready for CI.
#
#   This image is intended to prepare a docker image that contains the external
#   libraries pre-installed. The image is parked at
#
#   https://hub.docker.com/repository/docker/jbakosi/
#
#   which can then be pulled by continuous integration (CI) to build and test.
#   This ensures the external libs do not have to be rebuilt, any time the test
#   suite needs to run, which reduces load on CI.
#
#   Usage:
#
#   docker build -f debian-smp -t xyst-gnu-smp .#--build-arg COMMIT=master --no-cache
#   docker-squash --cleanup xyst-gnu-smp -t jbakosi/xyst-gnu-smp
#   docker push jbakosi/xyst-gnu-smp
#
################################################################################

FROM debian:bullseye

# Install system-wide prerequisites
RUN apt-get update -y && apt-get install -y git autoconf cmake gfortran g++ gmsh libblas-dev liblapack-dev libopenmpi-dev libhdf5-dev libhdf5-openmpi-dev libnetcdf-mpi-dev libboost-all-dev tao-pegtl-dev

# Clone
RUN git clone https://codeberg.org/xyst/xyst.git
ARG COMMIT
RUN cd xyst && git checkout $COMMIT && git log -1 HEAD

# Build external libs
RUN cd xyst && mkdir -p external/build && cd external/build && cmake -DSMP=on .. && make -sj$(grep -c processor /proc/cpuinfo)

# Clean up
RUN rm -rf xyst/external/build

# The commands below can be used to build and test xyst if anything upstream is
# updated: comment clean-up above, uncomment below, run, after no error,
# comment below and re-enable clean-up above.

# Build
#RUN cd xyst && mkdir -p build && cd build && cmake -DSMP=on -DRUNNER=mpirun -DRUNNER_NCPUS_ARG=-n -DRUNNER_ARGS="--allow-run-as-root -oversubscribe" -DPOSTFIX_RUNNER_ARGS=+setcpuaffinity ../src && make -sj$(grep -c processor /proc/cpuinfo)
# Run tests
#RUN cd xyst/build && mpirun --allow-run-as-root -n $(grep -c processor /proc/cpuinfo) Main/unittest -v -q && ctest -j $(grep -c processor /proc/cpuinfo) --output-on-failure
