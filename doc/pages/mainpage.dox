/*!
@mainpage Xyst

@m_div{m-col-t-4 m-col-m-3 m-right-t}
<img src="images/Eo_circle_deep-orange_letter-x.svg"/>
@m_enddiv

_Xyst_ is a [Navier-Stokes](https://en.wikipedia.org/wiki/Navier%E2%80%93Stokes_equations) solver for engineering flows.

The goal of this project is to simulate engineering problems with a
production-quality code that is extensible and maintainable, using hardware
resources efficiently, even for problems with unpredictable, heterogeneous,
and dynamic compute-load distribution.

The software implementation facilitates the effective use of hardware of any
size, from laptops to the largest distributed-memory clusters, by combining
data-, and task-parallelism on top of the [Charm++](http://charmplusplus.org)
runtime system. Charm++'s execution model is asynchronous by default, allowing
arbitrary overlap of computation and communication. Built-in automatic load
balancing enables redistribution of heterogeneous computational load based on
real-time CPU load measurement at negligible cost. The runtime system also
features automatic checkpointing, fault tolerance, resilience against hardware
failure, and supports power-, and energy-aware computation.

@m_div{m-button m-success} <a href="https://link.xyst.cc/Hidalgo2-196K">@m_div{m-big}HiDALGO2: _Scaling to new heights: Xyst code excites with unprecedented 196K core run on LUMI supercomputer_@m_enddiv</a> @m_enddiv

@section mainpage_tools Tools

Xyst consists of the following tools:

@ref inciter_main --- __Euler and Navier-Stokes solvers for engineering flows__ \n
Implements multiple flow solvers for complex engineering geometries.

@ref meshconv_main --- __Tetrahedron-mesh converter__ \n
Converts large tetrahedron meshes between various formats.

@ref unittest_main --- __Test suite for (a)synchronous functions__ \n
Tests serial and (a)synchronous concurrent functions.

@section mainpage_build Build

Install prerequisites: _Debian-based linux_

@code{.sh}
apt install git cmake g++ ninja-build libopenmpi-dev libnetcdf-mpi-dev
@endcode

Clone, build, test

@code{.sh}
git clone https://codeberg.org/xyst/xyst.git && cd xyst
mkdir build && cd build && cmake -GNinja ../src && ninja && cd -
cd build && ./charmrun +p4 Main/unittest && ctest -j4 && cd -
@endcode

All executables will be under `build/Main/`.

@section mainpage_license License

[GPL v3](https://codeberg.org/xyst/xyst/src/branch/master/LICENSE).

@section mainpage_contributing Contributing

See @ref contributing.

@section mainpage_history History

Xyst was forked in 2022 from
[Quinoa](https://quinoacomputing.github.io/archive) which was started from
scratch in 2012. Compared to Quinoa, Xyst

1. Removes the stochastic differential equation solver
([walker](https://wlkr.cc)),

2. Implements different @ref inciter_solvers "solvers",

3. Uses [Lua](https://www.lua.org) for input files, and

4. Simplifies Quinoa's code and its build system.

Development on [Quinoa](https://github.com/quinoacomputing/quinoa) and
[Xyst](https://codeberg.org/xyst/xyst) continues on different forks, targeting
different families of problems.

@section authors Authors

@m_class{m-note m-default m-text-center}

[Jozsef Bakosi](https://github.com/jbakosi) -
[Bob Bird](https://github.com/rfbird) -
[Marc Charest](https://github.com/charest) -
[Francisco Gonzalez](https://github.com/franjgonzalez) -
[Ali Saleem Hasan](https://github.com/AliSaleemHasan) -
[Christoph Junghans](https://github.com/junghans) -
[Weizhao Li](https://github.com/WeizhaoLi2018) -
[Tanner Nielsen](https://github.com/TannerNielsen) -
[Aditya Pakki](https://github.com/adityapakki) -
[Aditya Pandare](https://github.com/adityakpandare) -
[Robert Pavel](https://github.com/rspavel) -
[Brandon Rogers](https://github.com/brog2610)

*/
