################################################################################
# vim: filetype=dockerfile:
#
# \file      docker/debian
# \copyright 2012-2015 J. Bakosi,
#            2016-2018 Los Alamos National Security, LLC.,
#            2019-2021 Triad National Security, LLC.
#            2022-2023 J. Bakosi
#            All rights reserved. See the LICENSE file for details.
# \brief     Install xyst external libraries ready for CI
# \details
#   This image is intended to prepare a docker image that contains the external
#   libraries pre-installed. The image is parked at
#
#   https://hub.docker.com/repository/docker/jbakosi/
#
#   which can then be pulled by continuous integration (CI) to build and test.
#   This ensures the external libs do not have to be rebuilt, any time the test
#   suite needs to run, which reduces load on CI.
#
#   Build image, squash, and push, after commenting Clone, Build, and Test:
#   docker build -f debian -t xyst-gnu .
#   docker-squash --cleanup xyst-gnu -t jbakosi/xyst-gnu
#   docker push jbakosi/xyst-gnu
#
#   Test in non-SMP or SMP mode, after uncommenting Clone, Build, and Test:
#   docker build -f debian -t xyst-gnu --build-arg CHARM_INSTALL_DIR=/charm-non-smp .
#   docker build -f debian -t xyst-gnu --build-arg CHARM_INSTALL_DIR=/charm-smp .
#
################################################################################

FROM debian:bookworm

# Install system-wide prerequisites
RUN apt-get update -y && apt-get install -y git cmake g++ gfortran ninja-build bzip2 zlib1g-dev libnetcdf-dev

# Install OpenMPI
ADD https://download.open-mpi.org/release/open-mpi/v4.1/openmpi-4.1.4.tar.bz2 /openmpi/
RUN cd /openmpi/ && tar xjf openmpi-4.1.4.tar.bz2 && cd openmpi-4.1.4 && ./configure --prefix=/opt/openmpi && make -sj$(grep -c processor /proc/cpuinfo) install
ENV CC /opt/openmpi/bin/mpicc
ENV CXX /opt/openmpi/bin/mpicxx
ENV PATH /opt/openmpi/bin:$PATH
ENV LD_LIBRARY_PATH /opt/openmpi/lib:$LD_LIBRARY_PATH
RUN rm -rf /openmpi

# Install Charm++ in both non-SMP and SMP mode
RUN git clone https://github.com/UIUC-PPL/charm && cd charm && git checkout v7.0.0-rc2
RUN cd charm && mkdir nonsmp && cd nonsmp && cmake -DSMP=off -DTARGET=charm -DNETWORK=mpi -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX:PATH=/charm-non-smp .. && make -sj$(grep -c processor /proc/cpuinfo) install
RUN cd charm && mkdir smp && cd smp && cmake -DSMP=on -DTARGET=charm -DNETWORK=mpi -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX:PATH=/charm-smp .. && make -sj$(grep -c processor /proc/cpuinfo) install
RUN rm -rf charm

# # Clone
# ARG COMMIT
# RUN git clone https://codeberg.org/xyst/xyst.git && cd xyst && git checkout $COMMIT && git log -1 HEAD
# # Build
# ARG CHARM_INSTALL_DIR
# RUN cd xyst && mkdir -p build && cd build && cmake -GNinja -DCHARM_INSTALL_DIR=${CHARM_INSTALL_DIR} -DRUNNER=mpirun -DRUNNER_NCPUS_ARG=-n -DRUNNER_ARGS="--allow-run-as-root -oversubscribe" -DPOSTFIX_RUNNER_ARGS=+setcpuaffinity ../src && ninja
# # Test
# RUN cd xyst/build && mpirun --allow-run-as-root -n $(grep -c processor /proc/cpuinfo) Main/unittest -q && ctest -j$(grep -c processor /proc/cpuinfo) --output-on-failure
