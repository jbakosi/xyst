/*!
  \page      zalcg_example_b747 ZalCG: Boeing 747

This example uses @ref inciter_zalcg in @ref inciter_main to compute the
stationary flow field around a Boeing 747 commercial airliner.

The test case is configured with the cruise Mach number of 0.84 and an angle
of attack of 3.06 degrees, which yields a transonic flow. Since the solution
converges to steady state, the most efficient ways to compute this problem are
to use implicit time marching or local time stepping [1] of which @ref
inciter_zalcg implements the latter allowing taking larger time steps for
larger cells.

@section zalcg_example_b747_setup Problem setup

The mesh, shown below, consists of 4,788,491 tetrahedra connecting 853,437
points.  The initial conditions prescribe the Mach number of 0.84 and the
velocity with an angle of attack of 3.06 degrees. At the outer surface of the
domain characteristic far-field boundary conditions are applied. Symmetry
(free-slip) conditions are applied on the airplane and symmetry surfaces.

@m_div{m-col-m-12 m-center-m}
<img src="images/b747_mesh_zalcg.png"/>
Surface mesh for computing the flow around a Boeing 747, nelem=4.7M, npoin=850K.
@m_enddiv

@note Contact us using the link at the bottom of the page for the mesh file.

@section zalcg_example_b747_sha Code revision to reproduce

To reproduce the results below, use code revision [f5fb9d0](https://codeberg.org/xyst/xyst/commit/f5fb9d0798deb38341c28dbab0a57b5602c0ab54) and the control file below.

@section zalcg_example_b747_control Control file

@code{.lua}
-- vim: filetype=lua:

print "Boeing 747"

ttyi = 10
cfl = 0.5

solver = "zalcg"
fctsys = { 1, 2, 3, 4, 5 }
fctclip = true
fctfreeze = 1.2e-5
stab2 = true
stab2coef = 0.1

steady = true
residual = 1.0e-10
rescomp = 1

part = "phg"

mat = { spec_heat_ratio = 1.4 }

rho = 1.225     -- density of air at STP, kg/m3
pre = 1.0e+5    -- N/m^2
mach = 0.84     -- free stream Mach number
angle = 3.06    -- angle of attack

-- free stream sound speed
a = math.sqrt( mat.spec_heat_ratio * pre / rho )

ic = {
  density = rho,
  pressure = pre,
  velocity = { mach * a * math.cos(angle*math.pi/180.0),
               mach * a * math.sin(angle*math.pi/180.0),
               0.0 }
}

bc_sym = {
  sideset = { 1 }
}

bc_far = {
  pressure = pre,
  density = rho,
  velocity = ic.velocity,
  sideset = { 2 }
}

fieldout = {
  iter = 10000,
  sideset = { 1 },
}

diag = {
  iter = 10,
  format = "scientific",
  precision = 12
}
@endcode

@section zalcg_example_b747_run Run on 32 CPUs

@code{.bash}
./charmrun +p32 Main/inciter -i b747s.exo -c b747.q |& tee b747.out
@endcode

@section zalcg_example_b747_conv Convergence to steady state

The figure below shows the convergence history of the L2-norms of the residuals
of the conserved quantities.
@m_div{m-col-m-10 m-center-m}
<img src="images/b747_res_zalcg.png"/>
@m_enddiv

@section zalcg_example_b747_fieldvis Visualization

[ParaView](https://www.paraview.org) can be used for interactive visualization
of the numerically computed 3D fields as

@code{.bash}
paraview out.e-s.0.32.0
@endcode

Results on the airplane body and symmetry surfaces can be visualized by first
stitching the partitioned surface output files into a single surface output
file followed by invoking paraview on the stitched surface exo file:
@code{.bash}
Main/meshconv -i out-surf.1.e-s.0.32.% -o out-surf.1.exo
paraview out-surf.1.exo
@endcode

The Mach number distribution on the combined airplane and symmetry surface is
depicted below.

@m_div{m-col-m-12 m-center-m}
<img src="images/b747_mach_zalcg.png"/>
Mach number distribution and contours on the symmetry and airplane surfaces.
@m_enddiv

@section zalcg_example_b747_references References

@m_div{m-text m-noindent}
[1] R. Lohner, [Applied Computational Fluid Dynamics Techniques: An Introduction Based on Finite Element Methods](https://doi.org/10.1002/9780470989746), Wiley, 2008.
@m_enddiv

*/
