/*!
@mainpage Xyst

@m_div{m-col-m-2 m-right-m}
<img src="images/Eo_circle_deep-orange_letter-x.svg"/>
@m_enddiv

_Xyst_ is a Navier-Stokes solver for engineering flows.

Using the [Charm++](http://charmplusplus.org/) runtime system, it employs
_asynchronous_ (or non-blocking) parallel programming and decomposes
computational problems into a large number of work units (that may be more than
the available number of processors) enabling _arbitrary overlap_ of parallel
computation, communication, input, and output. Then the runtime system
_dynamically_ and _automatically_ homogenizes computational load across the
simulation distributed across many computers.

@section mainpage_tools Tools

Xyst consists of the following tools:

@ref inciter_main --- __Navier-Stokes solver for engineering flows__

_Inciter_ is a fully asynchronous distributed-memory-parallel fluid solver for
complex engineering geometries. We are working on a flow solver using
continuous Galerkin finite element methods and solution-adaptive
mesh-refinement, enabling dynamically concentrating compute resources to
regions with interesting physics.

@ref meshconv_main --- __Tetrahedron-mesh converter__

_MeshConv_ is a mesh file converter that can be used to convert tetrahedron
meshes from and to various formats.

@ref unittest_main --- __Test suite for synchronous and asynchronous
functions__

_UnitTest_ is an asynchronous distributed-memory-parallel test harness, capable
of testing serial, synchronous (e.g., MPI) parallel, and asynchronous parallel
(e.g., Charm++) functions.

@section mainpage_build Build

Install prerequisites: _Debian/Ubuntu linux_

@code
apt-get install git autoconf cmake gfortran g++ gmsh libblas-dev liblapack-dev libopenmpi-dev libhdf5-dev libhdf5-openmpi-dev libnetcdf-mpi-dev libboost-all-dev tao-pegtl-dev libpstreams-dev
@endcode

Clone, build third-party libraries, build, test

@code
git clone https://codeberg.org/xyst/xyst.git && cd xyst
mkdir external/build && cd external/build && cmake .. && make -sj$(grep -c processor /proc/cpuinfo) && cd -
mkdir build && cd build && cmake ../src && make -sj$(grep -c processor /proc/cpuinfo) && cd -
cd build && ./charmrun +p $(grep -c processor /proc/cpuinfo) Main/unittest -v -q && ctest -j $(grep -c processor /proc/cpuinfo) --output-on-failure && cd -
@endcode

All executables will be under `build/Main/`.

@section mainpage_license License

GPL v3.

@section mainpage_history History

Xyst is forked from [Quinoa](https://quinoacomputing.github.io/archive). Compared to
Quinoa, Xyst

1. removes the stochastic differential equation solver
([walker](https://wlkr.cc)),

2. replaces all of Quinoa's solvers with an edge-based implementation of
Quinoa's ALECG, renamed here as @ref inciter_riecg, and

3. significantly simplifies Quinoa's original code and its build system.

Development on [Quinoa](https://github.com/quinoacomputing/quinoa) and
[Xyst](https://codeberg.org/xyst/xyst) continues on two different forks.

@section authors Authors

@m_class{m-note m-default m-text-center}

[Jozsef Bakosi](https://github.com/jbakosi) -
[Aditya Pandare](https://github.com/adityakpandare) -
[Weizhao Li](https://github.com/WeizhaoLi2018) -
[Bob Bird](https://github.com/rfbird) -
[Marc Charest](https://github.com/charest) -
[Tanner Nielsen](https://github.com/TannerNielsen) -
[Christoph Junghans](https://github.com/junghans) -
[Francisco Gonzalez](https://github.com/franjgonzalez) -
[Aditya Pakki](https://github.com/adityapakki) -
[Robert Pavel](https://github.com/rspavel) -
[Brandon Rogers](https://github.com/brog2610)

*/
