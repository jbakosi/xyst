################################################################################
# vim: filetype=dockerfile:
#
# \file      tools/docker/debian
# \copyright 2012-2015 J. Bakosi,
#            2016-2018 Los Alamos National Security, LLC.,
#            2019-2021 Triad National Security, LLC.
#            2022-2023 J. Bakosi
#            All rights reserved. See the LICENSE file for details.
# \brief     Install Charm++ for xyst ready for CI
# \details
#   This image is intended to prepare a docker image that contains the external
#   libraries pre-installed. The image is parked at
#
#   https://hub.docker.com/repository/docker/jbakosi/
#
#   which can then be pulled by continuous integration (CI) to build and test.
#   This ensures the external libs do not have to be rebuilt, any time the test
#   suite needs to run, which reduces load on CI.
#
#   Usage:
#
#   docker build -f debian -t xyst-gnu . #--build-arg COMMIT=master --no-cache
#   docker-squash --cleanup xyst-gnu -t jbakosi/xyst-gnu
#   docker push jbakosi/xyst-gnu
#
################################################################################

FROM debian:bullseye

# Install system-wide prerequisites
RUN apt-get update -y && apt-get install -y git autoconf cmake g++ gmsh libopenmpi-dev libhdf5-dev libhdf5-openmpi-dev libnetcdf-mpi-dev tao-pegtl-dev

# Build Charm++
RUN git clone https://github.com/UIUC-PPL/charm && cd charm && git checkout v7.0.0-rc2
RUN cd charm && mkdir b && cd b && cmake -D TARGET=charm -D NETWORK=mpi -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX:PATH=/charm-install .. && make -sj$(grep -c processor /proc/cpuinfo) install
RUN rm -rf charm

# # Clone
# RUN git clone https://codeberg.org/xyst/xyst.git
# ARG COMMIT
# RUN cd xyst && git checkout $COMMIT && git log -1 HEAD
# # Build
# RUN cd xyst && mkdir -p build && cd build && cmake -DCHARM_INSTALL_DIR=/charm-install -DRUNNER=mpirun -DRUNNER_NCPUS_ARG=-n -DRUNNER_ARGS="--allow-run-as-root -oversubscribe" ../src && make -sj$(grep -c processor /proc/cpuinfo)
# # Run tests
# RUN cd xyst/build && mpirun --allow-run-as-root -n $(grep -c processor /proc/cpuinfo) Main/unittest -v -q && ctest -j $(grep -c processor /proc/cpuinfo) --output-on-failure
