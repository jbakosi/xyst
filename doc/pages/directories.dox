/*!

@dir src
@brief Root of the source tree

@details This is the root of the source tree. Browse the directories below to
learn more about how the source code is organized into directories.

@dir src/Base
@brief Basic, general, generic utilities, reused across all executables

@details This directory contains basic, usually small, utility-like
functionality. The classes and functions defined here are general purpose,
usually generic, and therefore can and are heavily reused across all
executables built by Xyst.

@dir src/Control
@brief Command line and input file parsing and grammars for all executables

@details This directory contains parsing-related functionality for all
executables.

@dir src/Statistics
@brief Estimating statistical moments and probablity distributions from ensembles

@details This directory contains code to estimate arbitrary statistical moments
and discrete probability distributions from fluctuating ensembles. It also
contains code used to aggregate distributions across a large problem
distributed across many processing elements (PEs) in parallel, using custom
reducers of the Charm++ runtime system.

@dir src/UnitTest
@brief Functionality specific to _UnitTest_

@details This directory contains code specific to @ref unittest_main. The
subdirectory structure relative to `src/UnitTest/tests` mirrors that of the
root source directory, `src`, and contain unit test definitions for the given
subdirectories mirrored.

@dir tests/unit
@brief Root directory of all unit tests

@dir tests/unit/Base
@brief Unit tests for subdirectory _Base_

@dir tests/unit/Control
@brief Unit tests for subdirectory _Control_

@dir tests/unit/Inciter
@brief Unit tests for subdirectory _Inciter_

@dir tests/unit/Inciter/AMR
@brief Unit tests for subdirectory _Inciter/AMR_

@dir tests/unit/IO
@brief Unit tests for subdirectory _IO_

@dir tests/unit/Mesh
@brief Unit tests for subdirectory _Mesh_

@dir src/NoWarning
@brief Include files turning on/off specific compiler warnings for third-party library includes

@dir src/Physics
@brief Functions implementing physcs: operators, boundary conditions, test
problem-specific functionality, etc.

@dir src/Mesh
@brief Functionality related to unstructured meshes and derived data structures

@details This directory contains functionality used to discretize differential
equations in 3-dimensional space. It contains functionality to
 - store unstructured tetrahedron meshes, k::UnsMesh,
 - compute data structures derived from the connectivity graph, DerivedData.C,
 - helpers for iterating over derived data structures, e.g., tk::Around,
 - reordering meshes, Reorder.C, and
 - computing gradients, Gradients.C.

This directory does _not_ contain functionality to read or write meshes, that
is in `src/IO`.

@dir src/Main
@brief Driver routines for all executables

@details This directory contains all the main() functions, and all Main Charm++
chares for all executables. It contains
 - the `Main` Charm++ chares in `<executable>.C`,
 - the main Charm++ modules, `mainmodule`, in `<lower_case_executable>.ci`,
 - drivers, `<executable>Driver.[Ch]`, instantiated from the `Main` Charm++
   chares,
 - executable-specific pretty-printers in `<executable>Print.[Ch]`,
 - configuration compiler macros and values imported from cmake in
   `XystConfig.[Ch]`, and
 - generic initialization routines reused across all executables, Init.h.

In other words, this is where all execution starts for all executables.

@dir src/ZoltanInterOp
@brief Code interoperating with Zoltan for static mesh partitioning

@details This directory contains functionality specific to mesh partitioning.

@dir src/IO
@brief File input and output

@details This directory contains functionality for reading from and writing to
files. It has
 - native readers and writers of specialized (usually small) data, e.g.,
   error norms from @ref inciter_main,
 - mesh readers in various standard formats via third-party libraries, see @ref
   meshconv_main, and
 - a particle data writer via the [H5Part](http://vis.lbl.gov/Research/H5Part)
   library.

@dir src/Inciter
@brief Functionality specific to _Inciter_

@details This directory contains code specific to @ref inciter_main.

@dir src/Inciter/AMR
@brief Adaptive mesh refinement for _Inciter_

@details The adaptive mesh refinement (AMR) algorithm implemented in this directory  is specific to unstructured 3D tetrahedron meshes and closely follows

- @m_div{m-text m-strong}
  J. Walts, **[Parallel adaptive refinement for unsteady flow calculations on 3D unstructured grids](http://dx.doi.org/10.1002/fld.674)**, Int. J. Numer. Meth. Fluids, 46: 37â€“57. doi:10.1002/fld.674.
  @m_enddiv

*/
